
@page "/attractions"
@inject HttpClient Http
@inject NavigationManager NavigationManager // Odkomentuj, jeśli dodasz nawigację
@using AquaparkApp.Shared.Models 
@using System.Text.Json 
@using System.Text.Json.Serialization 


<PageTitle>Atrakcje - Aquapark</PageTitle>

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h1>Nasze Atrakcje</h1>
        @* <button class="btn btn-primary" @onclick="NavigateToCreateAttraction">Dodaj Nową Atrakcję</button> *@
    </div>

    @if (isLoading) // Zmieniono warunek, aby pokazywać spinner podczas ładowania
    {
        <div class="text-center">
            <p><em>Ładowanie atrakcji...</em></p>
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (loadFailed)
    {
        <div class="alert alert-danger" role="alert">
            Wystąpił błąd podczas ładowania atrakcji. Spróbuj ponownie później.
        </div>
    }
    else if (atrakcje == null || !atrakcje.Any()) // Sprawdź też `atrakcje == null` po załadowaniu
    {
        <div class="alert alert-info" role="alert">
            Obecnie nie mamy dostępnych informacji o atrakcjach.
        </div>
    }
    else
    {
        <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
            @foreach (var atrakcja in atrakcje)
            {
                <div class="col">
                    <div class="card h-100 shadow-sm">
                        <div class="card-body d-flex flex-column">
                            <h5 class="card-title text-primary">@atrakcja.Nazwa</h5>
                            @if (!string.IsNullOrWhiteSpace(atrakcja.Opis))
                            {
                                <p class="card-text flex-grow-1">@atrakcja.Opis</p>
                            }
                            else
                            {
                                <p class="card-text flex-grow-1"><em>Brak szczegółowego opisu.</em></p>
                            }
                            <ul class="list-group list-group-flush mt-auto">
                                <li class="list-group-item">Maksymalna liczba osób: @atrakcja.MaxOsób</li>
                                @if (atrakcja.WymagaDodatkowejOplaty)
                                {
                                    <li class="list-group-item text-danger">
                                        Wymaga dodatkowej opłaty:
                                        @if (atrakcja.CenaDodatkowa.HasValue)
                                        {
                                            <strong>@atrakcja.CenaDodatkowa.Value.ToString("C", new System.Globalization.CultureInfo("pl-PL"))</strong>
                                        }
                                        else
                                        {
                                            <strong>Tak</strong>
                                        }
                                    </li>
                                }
                                else
                                {
                                    <li class="list-group-item text-success">Wstęp w cenie biletu</li>
                                }
                            </ul>
                            @* Zakomentowane przyciski CRUD *@
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    private List<Atrakcja>? atrakcje;
    private bool isLoading = true; // Domyślnie true, aby pokazać spinner od razu
    private bool loadFailed = false;

    // Opcje serializatora JSON, na wypadek gdyby AtrakcjaController zwracał dane z cyklami
    // (co nie powinno mieć miejsca, jeśli nie ma .Include() w GetAtrakcje())
    private JsonSerializerOptions jsonSerializerOptions = new JsonSerializerOptions
    {
        ReferenceHandler = ReferenceHandler.Preserve,
        PropertyNameCaseInsensitive = true
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadAtrakcjeAsync();
    }

    private async Task LoadAtrakcjeAsync()
    {
        isLoading = true;
        loadFailed = false;
        // Nie resetuj atrakcje = null tutaj, jeśli chcesz zachować poprzednie dane podczas odświeżania
        // Ale dla pierwszego ładowania lub jeśli odświeżenie ma wyczyścić, to jest OK.
        // atrakcje = null;
        StateHasChanged(); // Pokaż spinner

        try
        {
            // Sprawdź, czy AtrakcjaController.GetAtrakcje() zwraca dane z cyklami.
            // Jeśli nie (co jest prawdopodobne dla prostej listy), możesz wrócić do:
            // atrakcje = await Http.GetFromJsonAsync<List<Atrakcja>>("api/Atrakcja");

            // Jeśli JEST ryzyko cykli lub chcesz być spójny z ManageClients:
            var response = await Http.GetAsync("api/Atrakcja");
            if (response.IsSuccessStatusCode)
            {
                var jsonString = await response.Content.ReadAsStringAsync();
                atrakcje = JsonSerializer.Deserialize<List<Atrakcja>>(jsonString, jsonSerializerOptions);
            }
            else
            {
                Console.WriteLine($"Błąd API (LoadAtrakcje): {response.StatusCode} - {await response.Content.ReadAsStringAsync()}");
                loadFailed = true;
                atrakcje = new List<Atrakcja>(); // Pusta lista w przypadku błędu
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Błąd podczas ładowania atrakcji: {ex.Message}");
            loadFailed = true;
            atrakcje = new List<Atrakcja>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged(); // Zaktualizuj UI po zakończeniu
        }
    }

    // Zakomentowane przykładowe metody CRUD, jeśli będziesz je dodawał
    // ...
}