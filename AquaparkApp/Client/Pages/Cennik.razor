
@page "/cennik"
@inject HttpClient Http
@using AquaparkApp.Shared.Models 
@using System.Text.Json
@using System.Text.Json.Serialization


<PageTitle>Cennik - Aquapark</PageTitle>

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h1>Cennik Naszych Usług</h1>
        @* Możesz dodać przyciski filtrowania lub sortowania, jeśli potrzebne *@
    </div>

    @if (isLoading)
    {
        <div class="text-center">
            <p><em>Ładowanie cennika...</em></p>
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (loadFailed)
    {
        <div class="alert alert-danger" role="alert">
            Wystąpił błąd podczas ładowania cennika. Spróbuj ponownie później.
        </div>
    }
    else if (ofertyCennikowe == null || !ofertyCennikowe.Any())
    {
        <div class="alert alert-info" role="alert">
            Obecnie nie mamy dostępnych informacji o cenniku.
        </div>
    }
    else
    {
        @* Podział na Bilety i Karnety dla lepszej czytelności *@
        var bilety = ofertyCennikowe.Where(o => o.Typ?.Equals("Bilet", StringComparison.OrdinalIgnoreCase) == true).ToList();
        var karnety = ofertyCennikowe.Where(o => o.Typ?.Equals("Karnet", StringComparison.OrdinalIgnoreCase) == true).ToList();
        var inneOferty = ofertyCennikowe.Where(o => o.Typ?.Equals("Bilet", StringComparison.OrdinalIgnoreCase) == false && o.Typ?.Equals("Karnet", StringComparison.OrdinalIgnoreCase) == false).ToList();

        @if (bilety.Any())
        {
            <h3 class="mt-4 mb-3 text-primary">Bilety</h3>
            <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
                @foreach (var oferta in bilety)
                {
                    <div class="col">
                        <div class="card h-100 shadow-sm">
                            <div class="card-header bg-info text-white">
                                <h5 class="mb-0">@oferta.NazwaOferty</h5>
                            </div>
                            <div class="card-body d-flex flex-column">
                                @if (!string.IsNullOrWhiteSpace(oferta.Opis))
                                {
                                    <p class="card-text">@oferta.Opis</p>
                                }
                                <ul class="list-group list-group-flush mt-auto">
                                    <li class="list-group-item"><strong>Cena: @oferta.CenaPodstawowa.ToString("C", new System.Globalization.CultureInfo("pl-PL"))</strong></li>
                                    @if (oferta.LimitCzasuMinuty.HasValue)
                                    {
                                        <li class="list-group-item">Limit czasu: @oferta.LimitCzasuMinuty min</li>
                                        @if (oferta.KaraZaMinutePrzekroczenia.HasValue && oferta.KaraZaMinutePrzekroczenia > 0)
                                        {
                                            <li class="list-group-item">Dopłata za przekroczenie: @oferta.KaraZaMinutePrzekroczenia.Value.ToString("C", new System.Globalization.CultureInfo("pl-PL")) / min</li>
                                        }
                                    }
                                    <li class="list-group-item">Ważna od: @oferta.ObowiazujeOd.ToString("yyyy-MM-dd")</li>
                                    @if (oferta.ObowiazujeDo.HasValue)
                                    {
                                        <li class="list-group-item">Ważna do: @oferta.ObowiazujeDo.Value.ToString("yyyy-MM-dd")</li>
                                    }
                                </ul>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }

        @if (karnety.Any())
        {
            <h3 class="mt-5 mb-3 text-success">Karnety</h3>
            <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
                @foreach (var oferta in karnety)
                {
                    <div class="col">
                        <div class="card h-100 shadow-sm">
                             <div class="card-header bg-success text-white">
                                <h5 class="mb-0">@oferta.NazwaOferty</h5>
                            </div>
                            <div class="card-body d-flex flex-column">
                                @if (!string.IsNullOrWhiteSpace(oferta.Opis))
                                {
                                    <p class="card-text">@oferta.Opis</p>
                                }
                                <ul class="list-group list-group-flush mt-auto">
                                    <li class="list-group-item"><strong>Cena: @oferta.CenaPodstawowa.ToString("C", new System.Globalization.CultureInfo("pl-PL"))</strong></li>
                                    @if (oferta.LiczbaWejsc.HasValue)
                                    {
                                        <li class="list-group-item">Liczba wejść: @oferta.LiczbaWejsc</li>
                                    }
                                    @if (oferta.LimitCzasuMinuty.HasValue)
                                    {
                                        <li class="list-group-item">Limit czasu na wejście: @oferta.LimitCzasuMinuty min</li>
                                         @if (oferta.KaraZaMinutePrzekroczenia.HasValue && oferta.KaraZaMinutePrzekroczenia > 0)
                                        {
                                            <li class="list-group-item">Dopłata za przekroczenie: @oferta.KaraZaMinutePrzekroczenia.Value.ToString("C", new System.Globalization.CultureInfo("pl-PL")) / min</li>
                                        }
                                    }
                                    <li class="list-group-item">Ważny od: @oferta.ObowiazujeOd.ToString("yyyy-MM-dd")</li>
                                    @if (oferta.ObowiazujeDo.HasValue)
                                    {
                                        <li class="list-group-item">Ważny do: @oferta.ObowiazujeDo.Value.ToString("yyyy-MM-dd")</li>
                                    }
                                </ul>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        
        @if (inneOferty.Any())
        {
            <h3 class="mt-5 mb-3 text-secondary">Inne Oferty</h3>
            <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
                @* Tutaj pętla dla innych ofert, jeśli istnieją *@
            </div>
        }
    }
</div>

@code {
    private List<OfertaCennikowa>? ofertyCennikowe;
    private bool isLoading = true;
    private bool loadFailed = false;

    // Opcje serializatora JSON, spójne z innymi komponentami
    private JsonSerializerOptions jsonSerializerOptions = new JsonSerializerOptions
    {
        ReferenceHandler = ReferenceHandler.Preserve, // Na wypadek, gdyby OfertaCennikowa miała cykle (choć mniej prawdopodobne dla prostej listy)
        PropertyNameCaseInsensitive = true
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadCennikAsync();
    }

    private async Task LoadCennikAsync()
    {
        isLoading = true;
        loadFailed = false;
        StateHasChanged();

        try
        {
            // Używamy GetAsync i ręcznej deserializacji dla spójności
            var response = await Http.GetAsync("api/OfertaCennikowa");
            if (response.IsSuccessStatusCode)
            {
                var jsonString = await response.Content.ReadAsStringAsync();
                ofertyCennikowe = JsonSerializer.Deserialize<List<OfertaCennikowa>>(jsonString, jsonSerializerOptions);
            }
            else
            {
                Console.WriteLine($"Błąd API (LoadCennik): {response.StatusCode} - {await response.Content.ReadAsStringAsync()}");
                loadFailed = true;
                ofertyCennikowe = new List<OfertaCennikowa>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Błąd podczas ładowania cennika: {ex.Message}");
            loadFailed = true;
            ofertyCennikowe = new List<OfertaCennikowa>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}